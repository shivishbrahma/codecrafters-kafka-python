from enum import Enum

class ErrorCode(Enum):
    UNKNOWN_SERVER_ERROR = -1
    NONE = 0
    OFFSET_OUT_OF_RANGE = 1
    CORRUPT_MESSAGE = 2
    UNKNOWN_TOPIC_OR_PARTITION = 3
    INVALID_FETCH_SIZE = 4
    LEADER_NOT_AVAILABLE = 5
    NOT_LEADER_OR_FOLLOWER = 6
    REQUEST_TIMED_OUT = 7
    BROKER_NOT_AVAILABLE = 8
    REPLICA_NOT_AVAILABLE = 9
    MESSAGE_TOO_LARGE = 10
    STALE_CONTROLLER_EPOCH = 11
    OFFSET_METADATA_TOO_LARGE = 12
    NETWORK_EXCEPTION = 13
    COORDINATOR_LOAD_IN_PROGRESS = 14
    COORDINATOR_NOT_AVAILABLE = 15
    NOT_COORDINATOR = 16
    INVALID_TOPIC_EXCEPTION = 17
    RECORD_LIST_TOO_LARGE = 18
    NOT_ENOUGH_REPLICAS = 19
    NOT_ENOUGH_REPLICAS_AFTER_APPEND = 20
    INVALID_REQUIRED_ACKS = 21
    ILLEGAL_GENERATION = 22
    INCONSISTENT_GROUP_PROTOCOL = 23
    INVALID_GROUP_ID = 24
    UNKNOWN_MEMBER_ID = 25
    INVALID_SESSION_TIMEOUT = 26
    REBALANCE_IN_PROGRESS = 27
    INVALID_COMMIT_OFFSET_SIZE = 28
    TOPIC_AUTHORIZATION_FAILED = 29
    GROUP_AUTHORIZATION_FAILED = 30
    CLUSTER_AUTHORIZATION_FAILED = 31
    INVALID_TIMESTAMP = 32
    UNSUPPORTED_SASL_MECHANISM = 33
    ILLEGAL_SASL_STATE = 34
    UNSUPPORTED_VERSION = 35
    TOPIC_ALREADY_EXISTS = 36
    INVALID_PARTITIONS = 37
    INVALID_REPLICATION_FACTOR = 38
    INVALID_REPLICA_ASSIGNMENTS = 39
    INVALID_CONFIG = 40
    NOT_CONTROLLER = 41
    INVALID_REQUEST = 42
    UNSUPPORTED_FOR_MESSAGE_FORMAT = 43
    POLICY_VIOLATION = 44
    OUT_OF_ORDER_SEQUENCE_NUMBER = 45
    DUPLICATE_SEQUENCE_NUMBER = 46
    INVALID_PRODUCER_EPOCH = 47
    INVALID_TXN_STATE = 48
    INVALID_PRODUCER_ID_MAPPING = 49
    INVALID_TRANSACTION_TIMEOUT = 50
    CONCURRENT_TRANSACTIONS = 51
    TRANSACTION_COORDINATOR_FENCED = 52
    TRANSACTIONAL_ID_AUTHORIZATION_FAILED = 53
    SECURITY_DISABLED = 54
    OPERATION_NOT_ATTEMPTED = 55
    KAFKA_STORAGE_ERROR = 56
    LOG_DIR_NOT_FOUND = 57
    SASL_AUTHENTICATION_FAILED = 58
    UNKNOWN_PRODUCER_ID = 59
    REASSIGNMENT_IN_PROGRESS = 60

    def to_bytes(self):
        return self.value.to_bytes(2, byteorder='big')
   
    def __str__(self):
        return f"{self.name}({self.value})"